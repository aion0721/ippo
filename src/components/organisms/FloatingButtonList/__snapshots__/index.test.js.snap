// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should match snapshot: FloatingButtonList/one 1`] = `
.c1 {
  border-radius: 50%;
  height: 50px;
  width: 50px;
}

.c1:focus {
  outline-width: 0;
}

.c0 {
  position: fixed;
  right: 16px;
  bottom: 16px;
}

<FloatingButtonList
  items={
    Array [
      Object {
        "icon": "notifications",
        "onClick": [MockFunction],
      },
    ]
  }
>
  <Styled(RoundButton)
    icon="notifications"
    index={0}
    key="0"
    onClick={[MockFunction]}
    xlarge={true}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bwzfXH",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  position: fixed;
  right: 16px;
  bottom: ",
              [Function],
              ";
",
            ],
          },
          "displayName": "Styled(RoundButton)",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bwzfXH",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
          Symbol(Symbol.hasInstance): [Function],
        }
      }
      forwardedRef={null}
      icon="notifications"
      index={0}
      onClick={[MockFunction]}
      xlarge={true}
    >
      <RoundButton
        className="c0"
        icon="notifications"
        index={0}
        onClick={[MockFunction]}
        xlarge={true}
      >
        <Styled(Blueprint3.Button)
          className="c0"
          icon="notifications"
          index={0}
          onClick={[MockFunction]}
          xlarge={1}
        >
          <StyledComponent
            className="c0"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bdVaJa",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  border-radius: 50%;
  height: ",
                    [Function],
                    ";
  width: ",
                    [Function],
                    ";
  &:focus {
    outline-width: 0;
  }
",
                  ],
                },
                "displayName": "Styled(Blueprint3.Button)",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bdVaJa",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
                Symbol(Symbol.hasInstance): [Function],
              }
            }
            forwardedRef={null}
            icon="notifications"
            index={0}
            onClick={[MockFunction]}
            xlarge={1}
          >
            <Blueprint3.Button
              className="c0 c1"
              icon="notifications"
              index={0}
              onClick={[MockFunction]}
              xlarge={1}
            >
              <button
                className="bp3-button c0 c1"
                index={0}
                onClick={[MockFunction]}
                onKeyDown={[Function]}
                onKeyUp={[Function]}
                type="button"
                xlarge={1}
              >
                <Blueprint3.Icon
                  icon="notifications"
                  key="leftIcon"
                >
                  <span
                    className="bp3-icon bp3-icon-notifications"
                    icon="notifications"
                  >
                    <svg
                      data-icon="notifications"
                      height={16}
                      viewBox="0 0 16 16"
                      width={16}
                    >
                      <desc>
                        notifications
                      </desc>
                      <path
                        d="M8 16c1.1 0 2-.9 2-2H6c0 1.1.9 2 2 2zm6-5c-.55 0-1-.45-1-1V6c0-2.43-1.73-4.45-4.02-4.9 0-.04.02-.06.02-.1 0-.55-.45-1-1-1S7 .45 7 1c0 .04.02.06.02.1A4.992 4.992 0 0 0 3 6v4c0 .55-.45 1-1 1s-1 .45-1 1 .45 1 1 1h12c.55 0 1-.45 1-1s-.45-1-1-1z"
                        fillRule="evenodd"
                        key="0"
                      />
                    </svg>
                  </span>
                </Blueprint3.Icon>
                <Blueprint3.Icon
                  key="rightIcon"
                />
              </button>
            </Blueprint3.Button>
          </StyledComponent>
        </Styled(Blueprint3.Button)>
      </RoundButton>
    </StyledComponent>
  </Styled(RoundButton)>
</FloatingButtonList>
`;

exports[`should match snapshot: FloatingButtonList/three 1`] = `
.c1 {
  border-radius: 50%;
  height: 50px;
  width: 50px;
}

.c1:focus {
  outline-width: 0;
}

.c0 {
  position: fixed;
  right: 16px;
  bottom: 16px;
}

.c2 {
  position: fixed;
  right: 16px;
  bottom: 82px;
}

.c3 {
  position: fixed;
  right: 16px;
  bottom: 148px;
}

<FloatingButtonList
  items={
    Array [
      Object {
        "icon": "notifications",
        "onClick": [MockFunction],
      },
      Object {
        "icon": "notifications",
        "onClick": [MockFunction],
      },
      Object {
        "icon": "notifications",
        "onClick": [MockFunction],
      },
    ]
  }
>
  <Styled(RoundButton)
    icon="notifications"
    index={0}
    key="0"
    onClick={[MockFunction]}
    xlarge={true}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bwzfXH",
            "isStatic": false,
            "lastClassName": "c3",
            "rules": Array [
              "
  position: fixed;
  right: 16px;
  bottom: ",
              [Function],
              ";
",
            ],
          },
          "displayName": "Styled(RoundButton)",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bwzfXH",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
          Symbol(Symbol.hasInstance): [Function],
        }
      }
      forwardedRef={null}
      icon="notifications"
      index={0}
      onClick={[MockFunction]}
      xlarge={true}
    >
      <RoundButton
        className="c0"
        icon="notifications"
        index={0}
        onClick={[MockFunction]}
        xlarge={true}
      >
        <Styled(Blueprint3.Button)
          className="c0"
          icon="notifications"
          index={0}
          onClick={[MockFunction]}
          xlarge={1}
        >
          <StyledComponent
            className="c0"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bdVaJa",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  border-radius: 50%;
  height: ",
                    [Function],
                    ";
  width: ",
                    [Function],
                    ";
  &:focus {
    outline-width: 0;
  }
",
                  ],
                },
                "displayName": "Styled(Blueprint3.Button)",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bdVaJa",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
                Symbol(Symbol.hasInstance): [Function],
              }
            }
            forwardedRef={null}
            icon="notifications"
            index={0}
            onClick={[MockFunction]}
            xlarge={1}
          >
            <Blueprint3.Button
              className="c0 c1"
              icon="notifications"
              index={0}
              onClick={[MockFunction]}
              xlarge={1}
            >
              <button
                className="bp3-button c0 c1"
                index={0}
                onClick={[MockFunction]}
                onKeyDown={[Function]}
                onKeyUp={[Function]}
                type="button"
                xlarge={1}
              >
                <Blueprint3.Icon
                  icon="notifications"
                  key="leftIcon"
                >
                  <span
                    className="bp3-icon bp3-icon-notifications"
                    icon="notifications"
                  >
                    <svg
                      data-icon="notifications"
                      height={16}
                      viewBox="0 0 16 16"
                      width={16}
                    >
                      <desc>
                        notifications
                      </desc>
                      <path
                        d="M8 16c1.1 0 2-.9 2-2H6c0 1.1.9 2 2 2zm6-5c-.55 0-1-.45-1-1V6c0-2.43-1.73-4.45-4.02-4.9 0-.04.02-.06.02-.1 0-.55-.45-1-1-1S7 .45 7 1c0 .04.02.06.02.1A4.992 4.992 0 0 0 3 6v4c0 .55-.45 1-1 1s-1 .45-1 1 .45 1 1 1h12c.55 0 1-.45 1-1s-.45-1-1-1z"
                        fillRule="evenodd"
                        key="0"
                      />
                    </svg>
                  </span>
                </Blueprint3.Icon>
                <Blueprint3.Icon
                  key="rightIcon"
                />
              </button>
            </Blueprint3.Button>
          </StyledComponent>
        </Styled(Blueprint3.Button)>
      </RoundButton>
    </StyledComponent>
  </Styled(RoundButton)>
  <Styled(RoundButton)
    icon="notifications"
    index={1}
    key="1"
    onClick={[MockFunction]}
    xlarge={true}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bwzfXH",
            "isStatic": false,
            "lastClassName": "c3",
            "rules": Array [
              "
  position: fixed;
  right: 16px;
  bottom: ",
              [Function],
              ";
",
            ],
          },
          "displayName": "Styled(RoundButton)",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bwzfXH",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
          Symbol(Symbol.hasInstance): [Function],
        }
      }
      forwardedRef={null}
      icon="notifications"
      index={1}
      onClick={[MockFunction]}
      xlarge={true}
    >
      <RoundButton
        className="c2"
        icon="notifications"
        index={1}
        onClick={[MockFunction]}
        xlarge={true}
      >
        <Styled(Blueprint3.Button)
          className="c2"
          icon="notifications"
          index={1}
          onClick={[MockFunction]}
          xlarge={1}
        >
          <StyledComponent
            className="c2"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bdVaJa",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  border-radius: 50%;
  height: ",
                    [Function],
                    ";
  width: ",
                    [Function],
                    ";
  &:focus {
    outline-width: 0;
  }
",
                  ],
                },
                "displayName": "Styled(Blueprint3.Button)",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bdVaJa",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
                Symbol(Symbol.hasInstance): [Function],
              }
            }
            forwardedRef={null}
            icon="notifications"
            index={1}
            onClick={[MockFunction]}
            xlarge={1}
          >
            <Blueprint3.Button
              className="c2 c1"
              icon="notifications"
              index={1}
              onClick={[MockFunction]}
              xlarge={1}
            >
              <button
                className="bp3-button c2 c1"
                index={1}
                onClick={[MockFunction]}
                onKeyDown={[Function]}
                onKeyUp={[Function]}
                type="button"
                xlarge={1}
              >
                <Blueprint3.Icon
                  icon="notifications"
                  key="leftIcon"
                >
                  <span
                    className="bp3-icon bp3-icon-notifications"
                    icon="notifications"
                  >
                    <svg
                      data-icon="notifications"
                      height={16}
                      viewBox="0 0 16 16"
                      width={16}
                    >
                      <desc>
                        notifications
                      </desc>
                      <path
                        d="M8 16c1.1 0 2-.9 2-2H6c0 1.1.9 2 2 2zm6-5c-.55 0-1-.45-1-1V6c0-2.43-1.73-4.45-4.02-4.9 0-.04.02-.06.02-.1 0-.55-.45-1-1-1S7 .45 7 1c0 .04.02.06.02.1A4.992 4.992 0 0 0 3 6v4c0 .55-.45 1-1 1s-1 .45-1 1 .45 1 1 1h12c.55 0 1-.45 1-1s-.45-1-1-1z"
                        fillRule="evenodd"
                        key="0"
                      />
                    </svg>
                  </span>
                </Blueprint3.Icon>
                <Blueprint3.Icon
                  key="rightIcon"
                />
              </button>
            </Blueprint3.Button>
          </StyledComponent>
        </Styled(Blueprint3.Button)>
      </RoundButton>
    </StyledComponent>
  </Styled(RoundButton)>
  <Styled(RoundButton)
    icon="notifications"
    index={2}
    key="2"
    onClick={[MockFunction]}
    xlarge={true}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bwzfXH",
            "isStatic": false,
            "lastClassName": "c3",
            "rules": Array [
              "
  position: fixed;
  right: 16px;
  bottom: ",
              [Function],
              ";
",
            ],
          },
          "displayName": "Styled(RoundButton)",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bwzfXH",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
          Symbol(Symbol.hasInstance): [Function],
        }
      }
      forwardedRef={null}
      icon="notifications"
      index={2}
      onClick={[MockFunction]}
      xlarge={true}
    >
      <RoundButton
        className="c3"
        icon="notifications"
        index={2}
        onClick={[MockFunction]}
        xlarge={true}
      >
        <Styled(Blueprint3.Button)
          className="c3"
          icon="notifications"
          index={2}
          onClick={[MockFunction]}
          xlarge={1}
        >
          <StyledComponent
            className="c3"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bdVaJa",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  border-radius: 50%;
  height: ",
                    [Function],
                    ";
  width: ",
                    [Function],
                    ";
  &:focus {
    outline-width: 0;
  }
",
                  ],
                },
                "displayName": "Styled(Blueprint3.Button)",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bdVaJa",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
                Symbol(Symbol.hasInstance): [Function],
              }
            }
            forwardedRef={null}
            icon="notifications"
            index={2}
            onClick={[MockFunction]}
            xlarge={1}
          >
            <Blueprint3.Button
              className="c3 c1"
              icon="notifications"
              index={2}
              onClick={[MockFunction]}
              xlarge={1}
            >
              <button
                className="bp3-button c3 c1"
                index={2}
                onClick={[MockFunction]}
                onKeyDown={[Function]}
                onKeyUp={[Function]}
                type="button"
                xlarge={1}
              >
                <Blueprint3.Icon
                  icon="notifications"
                  key="leftIcon"
                >
                  <span
                    className="bp3-icon bp3-icon-notifications"
                    icon="notifications"
                  >
                    <svg
                      data-icon="notifications"
                      height={16}
                      viewBox="0 0 16 16"
                      width={16}
                    >
                      <desc>
                        notifications
                      </desc>
                      <path
                        d="M8 16c1.1 0 2-.9 2-2H6c0 1.1.9 2 2 2zm6-5c-.55 0-1-.45-1-1V6c0-2.43-1.73-4.45-4.02-4.9 0-.04.02-.06.02-.1 0-.55-.45-1-1-1S7 .45 7 1c0 .04.02.06.02.1A4.992 4.992 0 0 0 3 6v4c0 .55-.45 1-1 1s-1 .45-1 1 .45 1 1 1h12c.55 0 1-.45 1-1s-.45-1-1-1z"
                        fillRule="evenodd"
                        key="0"
                      />
                    </svg>
                  </span>
                </Blueprint3.Icon>
                <Blueprint3.Icon
                  key="rightIcon"
                />
              </button>
            </Blueprint3.Button>
          </StyledComponent>
        </Styled(Blueprint3.Button)>
      </RoundButton>
    </StyledComponent>
  </Styled(RoundButton)>
</FloatingButtonList>
`;

exports[`should match snapshot: FloatingButtonList/two 1`] = `
.c1 {
  border-radius: 50%;
  height: 50px;
  width: 50px;
}

.c1:focus {
  outline-width: 0;
}

.c0 {
  position: fixed;
  right: 16px;
  bottom: 16px;
}

.c2 {
  position: fixed;
  right: 16px;
  bottom: 82px;
}

<FloatingButtonList
  items={
    Array [
      Object {
        "icon": "notifications",
        "onClick": [MockFunction],
      },
      Object {
        "icon": "notifications",
        "onClick": [MockFunction],
      },
    ]
  }
>
  <Styled(RoundButton)
    icon="notifications"
    index={0}
    key="0"
    onClick={[MockFunction]}
    xlarge={true}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bwzfXH",
            "isStatic": false,
            "lastClassName": "c2",
            "rules": Array [
              "
  position: fixed;
  right: 16px;
  bottom: ",
              [Function],
              ";
",
            ],
          },
          "displayName": "Styled(RoundButton)",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bwzfXH",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
          Symbol(Symbol.hasInstance): [Function],
        }
      }
      forwardedRef={null}
      icon="notifications"
      index={0}
      onClick={[MockFunction]}
      xlarge={true}
    >
      <RoundButton
        className="c0"
        icon="notifications"
        index={0}
        onClick={[MockFunction]}
        xlarge={true}
      >
        <Styled(Blueprint3.Button)
          className="c0"
          icon="notifications"
          index={0}
          onClick={[MockFunction]}
          xlarge={1}
        >
          <StyledComponent
            className="c0"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bdVaJa",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  border-radius: 50%;
  height: ",
                    [Function],
                    ";
  width: ",
                    [Function],
                    ";
  &:focus {
    outline-width: 0;
  }
",
                  ],
                },
                "displayName": "Styled(Blueprint3.Button)",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bdVaJa",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
                Symbol(Symbol.hasInstance): [Function],
              }
            }
            forwardedRef={null}
            icon="notifications"
            index={0}
            onClick={[MockFunction]}
            xlarge={1}
          >
            <Blueprint3.Button
              className="c0 c1"
              icon="notifications"
              index={0}
              onClick={[MockFunction]}
              xlarge={1}
            >
              <button
                className="bp3-button c0 c1"
                index={0}
                onClick={[MockFunction]}
                onKeyDown={[Function]}
                onKeyUp={[Function]}
                type="button"
                xlarge={1}
              >
                <Blueprint3.Icon
                  icon="notifications"
                  key="leftIcon"
                >
                  <span
                    className="bp3-icon bp3-icon-notifications"
                    icon="notifications"
                  >
                    <svg
                      data-icon="notifications"
                      height={16}
                      viewBox="0 0 16 16"
                      width={16}
                    >
                      <desc>
                        notifications
                      </desc>
                      <path
                        d="M8 16c1.1 0 2-.9 2-2H6c0 1.1.9 2 2 2zm6-5c-.55 0-1-.45-1-1V6c0-2.43-1.73-4.45-4.02-4.9 0-.04.02-.06.02-.1 0-.55-.45-1-1-1S7 .45 7 1c0 .04.02.06.02.1A4.992 4.992 0 0 0 3 6v4c0 .55-.45 1-1 1s-1 .45-1 1 .45 1 1 1h12c.55 0 1-.45 1-1s-.45-1-1-1z"
                        fillRule="evenodd"
                        key="0"
                      />
                    </svg>
                  </span>
                </Blueprint3.Icon>
                <Blueprint3.Icon
                  key="rightIcon"
                />
              </button>
            </Blueprint3.Button>
          </StyledComponent>
        </Styled(Blueprint3.Button)>
      </RoundButton>
    </StyledComponent>
  </Styled(RoundButton)>
  <Styled(RoundButton)
    icon="notifications"
    index={1}
    key="1"
    onClick={[MockFunction]}
    xlarge={true}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bwzfXH",
            "isStatic": false,
            "lastClassName": "c2",
            "rules": Array [
              "
  position: fixed;
  right: 16px;
  bottom: ",
              [Function],
              ";
",
            ],
          },
          "displayName": "Styled(RoundButton)",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bwzfXH",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
          Symbol(Symbol.hasInstance): [Function],
        }
      }
      forwardedRef={null}
      icon="notifications"
      index={1}
      onClick={[MockFunction]}
      xlarge={true}
    >
      <RoundButton
        className="c2"
        icon="notifications"
        index={1}
        onClick={[MockFunction]}
        xlarge={true}
      >
        <Styled(Blueprint3.Button)
          className="c2"
          icon="notifications"
          index={1}
          onClick={[MockFunction]}
          xlarge={1}
        >
          <StyledComponent
            className="c2"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bdVaJa",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  border-radius: 50%;
  height: ",
                    [Function],
                    ";
  width: ",
                    [Function],
                    ";
  &:focus {
    outline-width: 0;
  }
",
                  ],
                },
                "displayName": "Styled(Blueprint3.Button)",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bdVaJa",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
                Symbol(Symbol.hasInstance): [Function],
              }
            }
            forwardedRef={null}
            icon="notifications"
            index={1}
            onClick={[MockFunction]}
            xlarge={1}
          >
            <Blueprint3.Button
              className="c2 c1"
              icon="notifications"
              index={1}
              onClick={[MockFunction]}
              xlarge={1}
            >
              <button
                className="bp3-button c2 c1"
                index={1}
                onClick={[MockFunction]}
                onKeyDown={[Function]}
                onKeyUp={[Function]}
                type="button"
                xlarge={1}
              >
                <Blueprint3.Icon
                  icon="notifications"
                  key="leftIcon"
                >
                  <span
                    className="bp3-icon bp3-icon-notifications"
                    icon="notifications"
                  >
                    <svg
                      data-icon="notifications"
                      height={16}
                      viewBox="0 0 16 16"
                      width={16}
                    >
                      <desc>
                        notifications
                      </desc>
                      <path
                        d="M8 16c1.1 0 2-.9 2-2H6c0 1.1.9 2 2 2zm6-5c-.55 0-1-.45-1-1V6c0-2.43-1.73-4.45-4.02-4.9 0-.04.02-.06.02-.1 0-.55-.45-1-1-1S7 .45 7 1c0 .04.02.06.02.1A4.992 4.992 0 0 0 3 6v4c0 .55-.45 1-1 1s-1 .45-1 1 .45 1 1 1h12c.55 0 1-.45 1-1s-.45-1-1-1z"
                        fillRule="evenodd"
                        key="0"
                      />
                    </svg>
                  </span>
                </Blueprint3.Icon>
                <Blueprint3.Icon
                  key="rightIcon"
                />
              </button>
            </Blueprint3.Button>
          </StyledComponent>
        </Styled(Blueprint3.Button)>
      </RoundButton>
    </StyledComponent>
  </Styled(RoundButton)>
</FloatingButtonList>
`;
