// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should match snapshot: RoundButton/bigsize 1`] = `
.c0 {
  border-radius: 50%;
  height: inherit;
  width: inherit;
}

.c0:focus {
  outline-width: 0;
}

<RoundButton
  icon="notifications"
  large={true}
>
  <Styled(Blueprint3.Button)
    icon="notifications"
    large={true}
    xlarge={0}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bdVaJa",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  border-radius: 50%;
  height: ",
              [Function],
              ";
  width: ",
              [Function],
              ";
  &:focus {
    outline-width: 0;
  }
",
            ],
          },
          "displayName": "Styled(Blueprint3.Button)",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bdVaJa",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
          Symbol(Symbol.hasInstance): [Function],
        }
      }
      forwardedRef={null}
      icon="notifications"
      large={true}
      xlarge={0}
    >
      <Blueprint3.Button
        className="c0"
        icon="notifications"
        large={true}
        xlarge={0}
      >
        <button
          className="bp3-button bp3-large c0"
          onKeyDown={[Function]}
          onKeyUp={[Function]}
          type="button"
          xlarge={0}
        >
          <Blueprint3.Icon
            icon="notifications"
            key="leftIcon"
          >
            <span
              className="bp3-icon bp3-icon-notifications"
              icon="notifications"
            >
              <svg
                data-icon="notifications"
                height={16}
                viewBox="0 0 16 16"
                width={16}
              >
                <desc>
                  notifications
                </desc>
                <path
                  d="M8 16c1.1 0 2-.9 2-2H6c0 1.1.9 2 2 2zm6-5c-.55 0-1-.45-1-1V6c0-2.43-1.73-4.45-4.02-4.9 0-.04.02-.06.02-.1 0-.55-.45-1-1-1S7 .45 7 1c0 .04.02.06.02.1A4.992 4.992 0 0 0 3 6v4c0 .55-.45 1-1 1s-1 .45-1 1 .45 1 1 1h12c.55 0 1-.45 1-1s-.45-1-1-1z"
                  fillRule="evenodd"
                  key="0"
                />
              </svg>
            </span>
          </Blueprint3.Icon>
          <Blueprint3.Icon
            key="rightIcon"
          />
        </button>
      </Blueprint3.Button>
    </StyledComponent>
  </Styled(Blueprint3.Button)>
</RoundButton>
`;

exports[`should match snapshot: RoundButton/nomal 1`] = `
.c0 {
  border-radius: 50%;
  height: inherit;
  width: inherit;
}

.c0:focus {
  outline-width: 0;
}

<RoundButton
  icon="notifications"
  large={false}
>
  <Styled(Blueprint3.Button)
    icon="notifications"
    large={false}
    xlarge={0}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bdVaJa",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  border-radius: 50%;
  height: ",
              [Function],
              ";
  width: ",
              [Function],
              ";
  &:focus {
    outline-width: 0;
  }
",
            ],
          },
          "displayName": "Styled(Blueprint3.Button)",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bdVaJa",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
          Symbol(Symbol.hasInstance): [Function],
        }
      }
      forwardedRef={null}
      icon="notifications"
      large={false}
      xlarge={0}
    >
      <Blueprint3.Button
        className="c0"
        icon="notifications"
        large={false}
        xlarge={0}
      >
        <button
          className="bp3-button c0"
          onKeyDown={[Function]}
          onKeyUp={[Function]}
          type="button"
          xlarge={0}
        >
          <Blueprint3.Icon
            icon="notifications"
            key="leftIcon"
          >
            <span
              className="bp3-icon bp3-icon-notifications"
              icon="notifications"
            >
              <svg
                data-icon="notifications"
                height={16}
                viewBox="0 0 16 16"
                width={16}
              >
                <desc>
                  notifications
                </desc>
                <path
                  d="M8 16c1.1 0 2-.9 2-2H6c0 1.1.9 2 2 2zm6-5c-.55 0-1-.45-1-1V6c0-2.43-1.73-4.45-4.02-4.9 0-.04.02-.06.02-.1 0-.55-.45-1-1-1S7 .45 7 1c0 .04.02.06.02.1A4.992 4.992 0 0 0 3 6v4c0 .55-.45 1-1 1s-1 .45-1 1 .45 1 1 1h12c.55 0 1-.45 1-1s-.45-1-1-1z"
                  fillRule="evenodd"
                  key="0"
                />
              </svg>
            </span>
          </Blueprint3.Icon>
          <Blueprint3.Icon
            key="rightIcon"
          />
        </button>
      </Blueprint3.Button>
    </StyledComponent>
  </Styled(Blueprint3.Button)>
</RoundButton>
`;
